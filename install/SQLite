#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Install packages
PackagesManage install "sqlite3"

#### Create databases
if CheckCommand 0 sqlite3; then
	if [ ! -f $MySB_DB ] || [ ! -s $MySB_DB ]; then sqlite3 -cmd '.timeout 150000' -echo $MySB_DB < $MySB_InstallDir/templates/MySB_2015-02-14.dump.sql; fi
	if [ -f $Wolf_DB ] || [ -s $Wolf_DB ]; then
		sqlite3 -cmd '.timeout 150000' $Wolf_DB "DELETE FROM secure_token WHERE 1"
		sqlite3 -cmd '.timeout 150000' $Wolf_DB "UPDATE user SET name = '', email = '', username = '', password = '', salt = '', last_login = '', last_failure = '', last_failure = '', created_on = '', updated_on = '' WHERE id = '2';"	
	fi
fi

if [ "$1" == "UPGRADE" ] && [ -s $MySB_DB ] && CheckCommand 0 sqlite3; then
	#### Add ruTorrent Trackers
	if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
	if [ -f $MySB_InstallDir/inc/funcs ]; then source $MySB_InstallDir/inc/funcs; fi
	GetRutorrentTrackers

	#### Import users files to database
	if [ -d $MySB_InstallDir/users/ ]; then
		UsersList="`ls $MySB_InstallDir/users/ | grep '.info' | sed 's/.\{5\}$//'`"
		cd $MySB_InstallDir/users/
		for SeedboxUser in $UsersList; do
			UserName="$(cat $SeedboxUser.info | grep 'Username=' | awk '{ print $2 }')"
			UserEmail="$(cat $SeedboxUser.info | grep 'E-mail=' | awk '{ print $2 }')"
			UserPassword="$(cat $SeedboxUser.info | grep 'Password=' | awk '{ print $2 }')"
			UserRPC="$(cat $SeedboxUser.info | grep 'RPC=' | awk '{ print $2 }')"
			UserSSH="$(cat $SeedboxUser.info | grep 'SSH=' | awk '{ print $2 }' | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
			UserSudo="$(cat $SeedboxUser.info | grep 'Sudo powers=' | awk '{ print $3 }' | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
			UserIP="$(cat $SeedboxUser.info | grep 'IP Address=' | awk '{ print $3 }')"
			UserScgiPort="$(cat $SeedboxUser.info | grep 'SCGI port=' | awk '{ print $3 }')"
			UserRtorrentPort="$(cat $SeedboxUser.info | grep 'rTorrent port=' | awk '{ print $3 }')"
			UserHomeDir="$(cat $SeedboxUser.info | grep 'Home=' | awk '{ print $2 }')"
			
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "INSERT into users (users_ident,users_email,users_passwd,rpc,sftp,sudo,admin,scgi_port,rtorrent_port,home_dir) VALUES (\"$UserName\",\"$UserEmail\",\"$UserPassword\",\"$UserRPC\",\"$UserSSH\",\"$UserSudo\",\"0\",\"$UserScgiPort\",\"$UserRtorrentPort\",\"$UserHomeDir\");"
			UserId="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT id_users FROM users WHERE users_ident = '$UserName'\"`"

			IFS=$','
			for ip in $UserIP; do 
				HostName="$(nslookup $ip | grep 'name =' | awk '{ print $4 }' | sed 's/.\{1\}$//g')"
				sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "INSERT into users_addresses (id_users,ipv4,hostname,check_by,is_active) VALUES (\"$UserId\",\"$ip\",\"$HostName\",\"ipv4\",\"1\");"
			done
			unset IFS
		done
		
		#### Add users trackers
		if [ -d /home/$SeedboxUser/rtorrent/.session/ ]; then
			TorrentListing="`ls -1r /home/$SeedboxUser/rtorrent/.session/`"

			if [ ! -z "$TorrentListing" ]; then
				cd /home/$SeedboxUser/rtorrent/.session/
				for Torrent in $TorrentListing; do
					if [ "`echo $Torrent | grep '.libtorrent_resume'`" != "" ]; then
						Tracker="`cat $Torrent | tr -cd '[:print:]' | sed 's/=//' | sed 's/:\/\//=/' | cut -d '=' -f 2 | cut -d '/' -f 1 | cut -d ':' -f 1`"
						if [ "`echo $TrackerList | grep $Tracker`" == "" ]; then
							TrackerList="$TrackerList $Tracker"
						fi
					fi
				done
			fi
		fi
		if [ ! -z "$TrackerList" ]; then
			for Tracker in $TrackerList; do
				PART1=`echo ${Tracker} | cut -d "." -f 1`
				PART2=`echo ${Tracker} | cut -d "." -f 2`
				PART3=`echo ${Tracker} | cut -d "." -f 3`
				if [ -z "$PART3" ]; then
					UserTrackerDomain="`echo $PART1`.`echo $PART2`"
				else
					UserTrackerDomain="`echo $PART2`.`echo $PART3`"
				fi
				unset PART1 PART2 PART3

				IfExist="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT tracker FROM trackers_list WHERE tracker_domain = '$UserTrackerDomain'\"`"
				if [ -z "$IfExist" ]; then
					# Add the tracker
					AddTracker $Tracker "users"
				fi
				
				# Force activation of the tracker
				log_daemon_msg "Force activation of tracker: $Tracker"
				sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE trackers_list SET is_active = '1' WHERE tracker_domain = '$UserTrackerDomain';"
				StatusLSB
			done
		fi
		unset TrackerList
		
		rm -rf $MySB_InstallDir/users/
	fi

	if [ -d $MySB_InstallDir/infos/ ]; then
		# ----- Main user info
		if [ -f $MySB_InstallDir/infos/email.info ] && [ -f $MySB_InstallDir/infos/mainuser.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE users SET admin = '1' WHERE users_email = '$(cat $MySB_InstallDir/infos/email.info)' and users_ident = '$(cat $MySB_InstallDir/infos/mainuser.info)';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/email.info
				rm -f $MySB_InstallDir/infos/mainuser.info
			fi
		fi
		# ----- Main user info

		#### Import files infos to database
		# ----- System info
		if [ -f $MySB_InstallDir/infos/version.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET mysb_version = '$(cat $MySB_InstallDir/infos/version.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/version.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/hostfqdn.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET hostname = '$(cat $MySB_InstallDir/infos/hostfqdn.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/hostfqdn.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/ipaddress.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET ipv4 = '$(cat $MySB_InstallDir/infos/ipaddress.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/ipaddress.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/primaryinet.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET primary_inet = '$(cat $MySB_InstallDir/infos/primaryinet.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/primaryinet.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/timezone.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET timezone = '$(cat $MySB_InstallDir/infos/timezone.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/timezone.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/MySB_password.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET mysb_user = '$(cat $MySB_InstallDir/infos/MySB_password.info | grep user | awk '{ print $2 }')' WHERE id_system = '1';"
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET mysb_password = '$(cat $MySB_InstallDir/infos/MySB_password.info | grep pass | awk '{ print $2 }')' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/MySB_password.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/certpass.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE system SET cert_password = '$(cat $MySB_InstallDir/infos/certpass.info)' WHERE id_system = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/certpass.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/port_ftp.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp1 = '$(cat $MySB_InstallDir/infos/port_ftp.info)' WHERE serv_name = 'VSFTPd';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/port_ftp.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/port_ftpdata.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp2 = '$(cat $MySB_InstallDir/infos/port_ftpdata.info)' WHERE serv_name = 'VSFTPd';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/port_ftpdata.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/port_ssh.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp1 = '$(cat $MySB_InstallDir/infos/port_ssh.info)' WHERE serv_name = 'SSH';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/port_ssh.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/port_https.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp1 = '$(cat $MySB_InstallDir/infos/port_https.info)' WHERE serv_name = 'NginX';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/port_https.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/port_http.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp2 = '$(cat $MySB_InstallDir/infos/port_http.info)' WHERE serv_name = 'NginX';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/port_http.info
			fi
		fi
		# ----- System info

		# ----- Services info
		if [ -f $MySB_InstallDir/infos/install_cakebox.info ] && [ -f $MySB_InstallDir/infos/port_cakebox.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp1 = '$(cat $MySB_InstallDir/infos/port_cakebox.info)', is_installed = '$(cat $MySB_InstallDir/infos/install_cakebox.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'CakeBox-Light';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_cakebox.info
				rm -f $MySB_InstallDir/infos/port_cakebox.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_webmin.info ] && [ -f $MySB_InstallDir/infos/port_webmin.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET port_tcp1 = '$(cat $MySB_InstallDir/infos/port_webmin.info)', is_installed = '$(cat $MySB_InstallDir/infos/install_webmin.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'Webmin';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_webmin.info
				rm -f $MySB_InstallDir/infos/port_webmin.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_openvpn.info ] && [ -f $MySB_InstallDir/infos/port_openvpn.info ] && [ -f $MySB_InstallDir/infos/proto_openvpn.info ]; then
			Port_OpenVPN_WithGW="$(cat $MySB_InstallDir/infos/port_openvpn.info)"
			Port_OpenVPN_WithoutGW="${Port_OpenVPN_WithGW}"
			(( Port_OpenVPN_WithoutGW++ ))
			Port_OpenVPN_TAP_WithoutGW="${Port_OpenVPN_WithoutGW}"
			(( Port_OpenVPN_TAP_WithoutGW++ ))

			case "$(cat $MySB_InstallDir/infos/proto_openvpn.info)" in
				"tcp")
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_openvpn.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')', port_tcp1 = '${Port_OpenVPN_WithGW}', port_tcp2 = '${Port_OpenVPN_WithoutGW}', port_tcp3 = '${Port_OpenVPN_TAP_WithoutGW}', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = '' WHERE serv_name = 'OpenVPN';"
				;;
				"udp")
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_openvpn.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')', port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '${Port_OpenVPN_WithGW}', port_udp2 = '${Port_OpenVPN_WithoutGW}', port_udp3 = '${Port_OpenVPN_TAP_WithoutGW}', ports_udp_list = '' WHERE serv_name = 'OpenVPN';"
				;;
			esac
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '1' WHERE serv_name = 'Samba';"
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '1' WHERE serv_name = 'NFS';"

			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_openvpn.info
				rm -f $MySB_InstallDir/infos/port_openvpn.info
				rm -f $MySB_InstallDir/infos/proto_openvpn.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_dnscrypt.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_dnscrypt.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'DNScrypt-proxy';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_dnscrypt.info
			fi
		else
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '1' WHERE serv_name = 'DNScrypt-proxy';"
		fi
		if [ -f $MySB_InstallDir/infos/install_fail2ban.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_fail2ban.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'Fail2Ban';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_fail2ban.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_manager.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_manager.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'Seedbox-Manager';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_manager.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_plexmedia.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_plexmedia.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'Plex Media Server';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_plexmedia.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/blocklist.info ]; then
			MySB_PeerBlock=$(cat $MySB_InstallDir/infos/blocklist.info)
			case $MySB_PeerBlock in
				PeerGuardian)
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '1' WHERE serv_name = 'PeerGuardian';"
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '0' WHERE serv_name = 'rTorrent Block List';"
				;;
				rTorrent)
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '1' WHERE serv_name = 'rTorrent Block List';"
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '0' WHERE serv_name = 'PeerGuardian';"
				;;
				*)
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '0' WHERE serv_name = 'rTorrent Block List';"
					sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '0' WHERE serv_name = 'PeerGuardian';"
				;;
			esac

			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/blocklist.info
			fi
		fi
		if [ -f $MySB_InstallDir/infos/install_logwatch.info ]; then
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(cat $MySB_InstallDir/infos/install_logwatch.info | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'LogWatch';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/install_logwatch.info
			fi
		else
			if [ -d /etc/logwatch/ ]; then
				IsInstalled_LogWatch=1
			else
				IsInstalled_LogWatch=0
			fi
			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$IsInstalled_LogWatch' WHERE serv_name = 'LogWatch';"
		fi
		# ----- Services info

		# ----- SMTP info
		if [ -f $MySB_InstallDir/infos/smtp.info ] \
			&& [ -f $MySB_InstallDir/infos/smtp_user.info ] \
			&& [ -f $MySB_InstallDir/infos/smtp_host.info ] \
			&& [ -f $MySB_InstallDir/infos/smtp_port.info ]; then

			SMTP_Provider="$(cat $MySB_InstallDir/infos/smtp.info)"
			SMTP_Username="$(cat $MySB_InstallDir/infos/smtp_user.info)"
			SMTP_Password="$(cat /etc/postfix/sasl/sasl_passwd | awk '{ print $2 }' | cut -d ":" -f 2)"
			SMTP_Host="$(cat $MySB_InstallDir/infos/smtp_host.info)"
			SMTP_Port="$(cat $MySB_InstallDir/infos/smtp_port.info)"
			MainUserEmail="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT users_email FROM users WHERE admin = '1'\"`"

			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE smtp SET smtp_provider = '$SMTP_Provider', smtp_username = '$SMTP_Username', smtp_passwd = '$SMTP_Password', smtp_host = '$SMTP_Host', smtp_port = '$SMTP_Port', smtp_email = '$MainUserEmail' WHERE id_smtp = '1';"

			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/smtp.info
				rm -f $MySB_InstallDir/infos/smtp_user.info
				rm -f $MySB_InstallDir/infos/smtp_host.info
				rm -f $MySB_InstallDir/infos/smtp_port.info
				rm -f $MySB_InstallDir/infos/smtp_security.info
			fi
		fi
		# ----- SMTP info

		# ----- Ports listing
		if [ -f $MySB_InstallDir/infos/ports.txt ]; then
			rm -f $MySB_InstallDir/infos/ports.txt
		fi
		# ----- Ports listing

		# ----- Renting infos
		if [ -f $MySB_InstallDir/infos/renting.info ]; then
			RentingModel="$(cat $MySB_InstallDir/infos/renting.info | grep 'Server model=' | awk -F= '{ print $2 }' | sed 's/^\ \ *//')"
			RentingGlobalCost="$(cat $MySB_InstallDir/infos/renting.info | grep 'Global cost=' | awk -F= '{ print $2 }' | awk '{ print $1 }'  | sed 's/^\ \ *//' | sed 's/\ $*//')"
			RentingTVA="$(cat $MySB_InstallDir/infos/renting.info | grep 'TVA=' | awk -F= '{ print $2 }' | awk '{ print $1 }'  | sed 's/^\ \ *//' | sed 's/\ $*//')"
			TotalUsers="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT count(*) FROM users\"`"

			export LANG=""
			X=`echo "$RentingGlobalCost/$TotalUsers" | bc -l`
			Y=`echo "($X*$RentingTVA)/100" | bc -l`
			PriceByUser=`echo "$X+$Y" | bc -l`
			PriceByUser=`printf '%.0f\n' $PriceByUser`

			sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE renting SET model = '$RentingModel', tva = '$RentingTVA', global_cost = '$RentingGlobalCost', nb_users = '$TotalUsers', price_per_users = '$PriceByUser' WHERE id_renting = '1';"
			if [ $? -eq 0 ]; then
				rm -f $MySB_InstallDir/infos/renting.info
			fi
		fi
		# ----- Renting infos

		# Create users trackers listing (compare)
		if [ -f $MySB_InstallDir/infos/trackers.list ]; then
			while read line; do
				if [ ! -z "$line" ]; then
					PART1=`echo ${line} | cut -d "." -f 1`
					PART2=`echo ${line} | cut -d "." -f 2`
					PART3=`echo ${line} | cut -d "." -f 3`

					if [ -z "$PART3" ]; then
						UserTrackerDomain="`echo $PART1`.`echo $PART2`"
					else
						UserTrackerDomain="`echo $PART2`.`echo $PART3`"
					fi
					unset PART1 PART2 PART3
					
					IfExist="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT tracker FROM trackers_list WHERE tracker_domain = '$UserTrackerDomain'\"`"
					if [ -z "$IfExist" ]; then
						AddTracker $UserTrackerDomain "users"
					fi
					unset IfExist
				fi
			done < $MySB_InstallDir/infos/trackers.list
			rm -f $MySB_InstallDir/infos/trackers.list
		fi
		# ----- Trackers listing

		if [ "`ls $MySB_InstallDir/infos/`" == "" ]; then
			rm -rf $MySB_InstallDir/infos/
		fi
	fi
	
fi # if [ -s $MySB_DB ] && CheckCommand 0 sqlite3; then

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################