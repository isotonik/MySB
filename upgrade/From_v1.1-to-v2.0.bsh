#!/bin/bash
# -----------------------------------------
source $(dirname $0)/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### VARs
MySB_InstallDir="/etc/MySB"
if [ ! -d /etc/MySB/ ]; then mkdir /etc/MySB/; fi
echo "MySB_InstallDir=\"$MySB_InstallDir\"" > /etc/MySB/config

#### Local functions
SwitchDNS() {
	case "$1" in
		"dnscrypt")
			sed -i '/nameserver/d' /etc/resolv.conf
			echo "nameserver 127.0.0.1" > /etc/resolv.conf
			echo "nameserver 127.0.0.2" > /etc/resolv.conf
		;;
		"standard")
			sed -i '/nameserver/d' /etc/resolv.conf
			echo "nameserver 208.67.220.220" >> /etc/resolv.conf
			echo "nameserver 8.8.8.8" >> /etc/resolv.conf
			echo "nameserver 4.2.2.1" >> /etc/resolv.conf
			echo "nameserver 208.67.222.222" >> /etc/resolv.conf
			echo "nameserver 8.8.4.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.2" >> /etc/resolv.conf
			echo "nameserver 4.2.2.3" >> /etc/resolv.conf
			echo "nameserver 4.2.2.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.5" >> /etc/resolv.conf
			echo "nameserver 4.2.2.6" >> /etc/resolv.conf
		;;
	esac
}

BannerUpgrade() {
	echo
	echo -e "${CRED}If you lose connection during installation, restart the SSH session and run the following command:$CEND"
	echo -e "${CGREEN}	screen -r MySB_Upgrade$CEND"
	echo
	echo -e "${CYELLOW}All users password will be changed by temporary password (except main user).$CEND"
	echo -e "${CYELLOW}All users IP addresses will be removed (except main user).$CEND"
	echo -e "${CYELLOW}They will receive an email with information to change it.$CEND"
	echo -e "${CYELLOW}Their IP address will be automatically added into the database.$CEND"
	echo
	echo -e "${CYELLOW}The upgrade may take 30 to 60 minutes around.$CEND"
	echo -e "${CYELLOW}This will depend on your server configuration and installed services.$CEND"
	echo
}


# QuestionGetString NO  "Type 'yes' to continue or 'no' to abort ?" CONTINUE YES
# if [ "$CONTINUE" == "NO" ]; then
	# EndingScript 0
# fi
BannerUpgrade
CountDown 20

if [ "$BANNER" == "ON" ]; then
	BannerGenerator
fi
BannerUpgrade

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=36

#### 1 - Move some files & directories
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Moving and deleting some files & directories$CEND..."
# Cleaning
rm -rf $MySB_InstallDir/temp/* &> /dev/null
rm -rf $MySB_InstallDir/files/* &> /dev/null
rm -rf $MySB_InstallDir/sources/* &> /dev/null
#rm -rf $MySB_InstallDir/logs/* &> /dev/null
# Manage LOGs
if [ -f $MySB_InstallDir/logs/MySB_UpdateGitHubRepo.log ]; then rm -f $MySB_InstallDir/logs/MySB_UpdateGitHubRepo.log; fi
if [ -f $MySB_InstallDir/logs/From_v1.0-to-v1.1.bsh.log ]; then rm -f $MySB_InstallDir/logs/From_v1.0-to-v1.1.bsh.log; fi
if [ -f $MySB_InstallDir/logs/Blocklist.log ]; then mv $MySB_InstallDir/logs/Blocklist.log $MySB_InstallDir/logs/Blocklists.log; fi
if [ -f $MySB_InstallDir/logs/BlockList.sh.log ]; then mv $MySB_InstallDir/logs/BlockList.sh.log $MySB_InstallDir/logs/BlocklistsRTorrent.bsh.log; fi
if [ -f $MySB_InstallDir/logs/Bridge-Start.sh.log ]; then rm -f $MySB_InstallDir/logs/Bridge-Start.sh.log; fi
if [ -f $MySB_InstallDir/logs/Bridge-Stop.sh.log ]; then rm -f $MySB_InstallDir/logs/Bridge-Stop.sh.log; fi
if [ -f $MySB_InstallDir/logs/CreateDir.log ]; then rm -f $MySB_InstallDir/logs/CreateDir.log; fi
if [ -f $MySB_InstallDir/logs/FirewallAndSecurity.sh.log ]; then mv $MySB_InstallDir/logs/FirewallAndSecurity.sh.log $MySB_InstallDir/logs/MySB_SecurityRules.log; fi
if [ -f $MySB_InstallDir/logs/GetTrackersCert.sh.log ]; then mv $MySB_InstallDir/logs/GetTrackersCert.sh.log $MySB_InstallDir/logs/GetTrackersCert.bsh.log; fi
if [ -f $MySB_InstallDir/logs/LogServer.sh.log ]; then mv $MySB_InstallDir/logs/LogServer.sh.log $MySB_InstallDir/logs/LogServer.bsh.log; fi
if [ -f $MySB_InstallDir/logs/MySB_Install.sh.log ]; then mv $MySB_InstallDir/logs/MySB_Install.sh.log $MySB_InstallDir/logs/MySB_Install.bsh.log; fi
if [ -f $MySB_InstallDir/logs/PaymentReminder.sh.log ]; then mv $MySB_InstallDir/logs/PaymentReminder.sh.log $MySB_InstallDir/logs/PaymentReminder.bsh.log; fi
if [ -f $MySB_InstallDir/logs/ruTorrent_GetTrackersCert.sh.invoked.log ]; then rm -f $MySB_InstallDir/logs/ruTorrent_GetTrackersCert.sh.invoked.log; fi
if [ -f $MySB_InstallDir/logs/UpdateGeoIP.sh.log ]; then mv $MySB_InstallDir/logs/UpdateGeoIP.sh.log $MySB_InstallDir/logs/UpdateGeoIP.bsh.log; fi
if [ -f $MySB_InstallDir/web/logs/install/BlockList.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/BlockList.sh-log.html $MySB_InstallDir/web/logs/install/BlocklistsRTorrent.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/Bridge-Start.sh-log.html ]; then rm -f $MySB_InstallDir/web/logs/install/Bridge-Start.sh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/Bridge-Stop.sh-log.html ]; then rm -f $MySB_InstallDir/web/logs/install/Bridge-Stop.sh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/CreateDir-log.html ]; then rm -f $MySB_InstallDir/web/logs/install/CreateDir-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/FirewallAndSecurity.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/FirewallAndSecurity.sh-log.html $MySB_InstallDir/web/logs/install/MySB_SecurityRules-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/GetTrackersCert.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/GetTrackersCert.sh-log.html $MySB_InstallDir/web/logs/install/GetTrackersCert.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/LogServer.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/LogServer.sh-log.html $MySB_InstallDir/web/logs/install/LogServer.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/MySB_Install.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/MySB_Install.sh-log.html $MySB_InstallDir/web/logs/install/MySB_Install.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/PaymentReminder.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/PaymentReminder.sh-log.html $MySB_InstallDir/web/logs/install/PaymentReminder.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/ruTorrent_GetTrackersCert.sh.invoked-log.html ]; then rm -f $MySB_InstallDir/web/logs/install/ruTorrent_GetTrackersCert.sh.invoked-log.html; fi
if [ -f $MySB_InstallDir/web/logs/install/UpdateGeoIP.sh-log.html ]; then mv $MySB_InstallDir/web/logs/install/UpdateGeoIP.sh-log.html $MySB_InstallDir/web/logs/install/UpdateGeoIP.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/scripts/BlockList.sh-log.html ]; then mv $MySB_InstallDir/web/logs/scripts/BlockList.sh-log.html $MySB_InstallDir/web/logs/scripts/BlocklistsRTorrent.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/scripts/FirewallAndSecurity.sh-log.html ]; then mv $MySB_InstallDir/web/logs/scripts/FirewallAndSecurity.sh-log.html $MySB_InstallDir/web/logs/bin/MySB_SecurityRules-log.html; fi
if [ -f $MySB_InstallDir/web/logs/scripts/GetTrackersCert.sh-log.html ]; then mv $MySB_InstallDir/web/logs/scripts/GetTrackersCert.sh-log.html $MySB_InstallDir/web/logs/scripts/GetTrackersCert.bsh-log.html; fi
if [ -f $MySB_InstallDir/web/logs/scripts/LogServer.sh-log.html ]; then mv $MySB_InstallDir/web/logs/scripts/LogServer.sh-log.html $MySB_InstallDir/web/logs/scripts/LogServer.bsh-log.html; fi
# Ghost files
if [ -f /root/2 ]; then rm -f /root/2 &> /dev/null; fi
if [ -f /root/033* ]; then rm -f /root/033* &> /dev/null; fi
if [ -f /root/MySB_Install.sh ]; then rm -f /root/MySB_Install.sh &> /dev/null; fi
# Disable some init
if [ -f /etc/init.d/bind9 ]; then update-rc.d bind9 remove -f &> /dev/null; fi
if [ -f /etc/init.d/FirewallAndSecurity ]; then
	update-rc.d FirewallAndSecurity remove -f &> /dev/null
	rm -f /etc/init.d/FirewallAndSecurity &> /dev/null
fi
if [ -f /etc/init.d/dnscrypt-proxy ]; then update-rc.d dnscrypt-proxy remove -f &> /dev/null; fi
if [ -f /etc/init.d/pgl ]; then update-rc.d pgl remove -f &> /dev/null; fi
if [ -f /etc/init.d/fail2ban ]; then update-rc.d fail2ban remove -f &> /dev/null; fi
# Links
if [ -h $MySB_InstallDir/web/fileshare.php ]; then rm -f $MySB_InstallDir/web/fileshare.php; fi
if [ -h $MySB_InstallDir/web/stream.php ]; then rm -f $MySB_InstallDir/web/stream.php; fi
if [ -h $MySB_InstallDir/web/view.php ]; then rm -f $MySB_InstallDir/web/view.php; fi
if [ -h /etc/nginx/sites-enabled/cakebox ]; then rm -f /etc/nginx/sites-enabled/cakebox; fi
# Moving directories
if [ -d $MySB_InstallDir/scripts/blocklist ]; then mv $MySB_InstallDir/scripts/blocklist $MySB_InstallDir/files/blocklists; fi
if [ -d /usr/share/nginx/html/rutorrent ]; then
	mv /usr/share/nginx/html/rutorrent/conf/users $MySB_InstallDir/temp/conf_users &> /dev/null && rm -rf $MySB_InstallDir/temp/conf_users/.svn &> /dev/null
	mv /usr/share/nginx/html/rutorrent/share/users $MySB_InstallDir/temp/share_users &> /dev/null && rm -rf $MySB_InstallDir/temp/share_users/.svn &> /dev/null
	mv /usr/share/nginx/html/rutorrent $MySB_InstallDir/web/ &> /dev/null
fi
# Cleaning old certificates
rm -f $MySB_InstallDir/ssl/*.cert &> /dev/null
rm -f $MySB_InstallDir/ssl/*.pem &> /dev/null
rm -f $MySB_InstallDir/ssl/*.key &> /dev/null
# Delete old crontab
crontab -l > /tmp/crontab.tmp
sed -i '/webmin\/package-updates/d' /tmp/crontab.tmp
sed -i '/nfs-kernel-server/d' /tmp/crontab.tmp
sed -i '/ldconfig/d' /tmp/crontab.tmp
sed -i '/drop_caches/d' /tmp/crontab.tmp
sed -i '/BlockList/d' /tmp/crontab.tmp
sed -i '/MySB_UpdateGitHubRepo/d' /tmp/crontab.tmp
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

#### 2 - Create missing directories and change rights
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating missing directories, changing owners and rights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### 3 - Stopping CRON and rTorrent sessions
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Stopping CRON and rTorrent sessions$CEND..."
service cron stop &> /dev/null
RtorrentSeesions="`ls -1r /etc/init.d/rtorrent-* | cut -d '/' -f 4`"
for Session in $RtorrentSeesions; do
	service $Session stop &> /dev/null
done
StatusSTD

#### 4 - Switching to standard DNS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Switching to standard DNS$CEND..."
SwitchDNS "standard" &> /dev/null
StatusSTD

#### 5 - Sources List
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Preparing sources for debian$CEND..."
screen -dmS SourcesList /bin/bash $MySB_InstallDir/install/SourcesList 'UPGRADE';
WaitingScreen SourcesList
StatusSTD

#### 6 - Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing all needed packages$CEND..."
screen -dmS Packages /bin/bash $MySB_InstallDir/install/Packages 'UPGRADE';
WaitingScreen Packages
StatusSTD

#### 7 - SQLite (move flat files to database)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating and populating databases, and check of all the trackers (this may take a while, please be patient)$CEND..."
screen -dmS SQLite /bin/bash $MySB_InstallDir/install/SQLite 'UPGRADE';
WaitingScreen SQLite
StatusSTD
# Remove ruTorrent dir now because SQLite need it (GetTrackersCert.bsh)
if [ -d $MySB_InstallDir/web/rutorrent ]; then rm -rf $MySB_InstallDir/web/rutorrent &> /dev/null; fi

#### 
ScriptInvoke "source" "$MySB_InstallDir/install/Questions" "$$" "UPGRADE"
#### Questions

#### 8 - Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Reading database informations$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
if [ -f $MySB_InstallDir/inc/funcs ]; then source $MySB_InstallDir/inc/funcs; fi
ListingUsers
StatusSTD

#### 9 - Tweaks
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- System optimizations$CEND..."
screen -dmS Tweaks /bin/bash $MySB_InstallDir/install/Tweaks 'UPGRADE';
WaitingScreen Tweaks
StatusSTD

#### 10 - Certificates
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Generating new certificates (from SHA1 1024bits to SHA256 2048bits)$CEND..."
screen -dmS Certificates /bin/bash $MySB_InstallDir/install/Certificates 'CreateCACertificate' 'NoServiceNameToGive' 'UPGRADE';
WaitingScreen Certificates
StatusSTD

#### 11 - DownloadAll (update)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Downloading all files at once (GIT, SVN, TAR.GZ, WBM)$CEND..."
screen -dmS DownloadAll /bin/bash $MySB_InstallDir/install/DownloadAll 'UPGRADE';
WaitingScreen DownloadAll
StatusSTD

#### 12 - NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring NginX$CEND..."
screen -dmS Nginx /bin/bash $MySB_InstallDir/install/Nginx 'UPGRADE';
WaitingScreen Nginx
StatusSTD

#### 13 - Bind
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Bind$CEND..."
screen -dmS Bind /bin/bash $MySB_InstallDir/install/Bind 'UPGRADE';
WaitingScreen Bind
StatusSTD

#### 14 - DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring DNScrypt-proxy$CEND..."
if [ "$IsInstalled_DNScrypt" == "YES" ] || [ "$ToInstall_DNScrypt" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'DNScrypt-proxy';"
	screen -dmS DNScrypt /bin/bash $MySB_InstallDir/install/DNScrypt 'UPGRADE';
	WaitingScreen DNScrypt
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 15 - PeerGuardian
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring PeerGuardian, and updating all lists (this may take a while, please be patient)$CEND..."
if [ "$IsInstalled_PeerGuardian" == "YES" ] || [ "$MySB_PeerBlock" == "PeerGuardian" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'PeerGuardian';"
	screen -dmS PeerGuardian /bin/bash $MySB_InstallDir/install/PeerGuardian 'UPGRADE';
	WaitingScreen PeerGuardian
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 16 - PHP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring PHP5$CEND..."
screen -dmS PHP /bin/bash $MySB_InstallDir/install/PHP 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 17 - Postfix
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Postfix$CEND..."
screen -dmS Postfix /bin/bash $MySB_InstallDir/install/Postfix 'UPGRADE';
WaitingScreen Postfix
StatusSTD

#### 18 - VSFTPd
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring VSFTPd$CEND..."
screen -dmS VSFTP /bin/bash $MySB_InstallDir/install/VSFTP 'UPGRADE';
WaitingScreen VSFTP
StatusSTD

#### 19 - Webmin
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Webmin$CEND..."
if [ "$IsInstalled_Webmin" == "YES" ] || [ "$ToInstall_Webmin" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Webmin';"
	screen -dmS Webmin /bin/bash $MySB_InstallDir/install/Webmin 'UPGRADE';
	WaitingScreen Webmin
	StatusSTD
	if [ -f /etc/webmin/miniserv.pem ]; then
		cat $MySB_InstallDir/ssl/webmin.cert > /etc/webmin/miniserv.pem
		cat $MySB_InstallDir/ssl/webmin.key >> /etc/webmin/miniserv.pem
	fi
else
	echo -e "${CGREEN}Nothing to do !$CEND"	
fi

#### 20 - Refresh tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Refreshing rTorrent, ruTorrent, Manager, Cakebox, LoadAvg (this may take a while, please be patient)$CEND..."
screen -dmS MySB_RefreshMe /bin/bash $MySB_InstallDir/bin/MySB_RefreshMe 'all' 'UPGRADE';
WaitingScreen MySB_RefreshMe
StatusSTD

#### 21 - Restore users data
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Restoring user data$CEND..."
for seedUser in $UsersList; do
	mv $MySB_InstallDir/temp/conf_users/$seedUser/plugins/stream/config.php $RutorrentDir/conf/users/$seedUser/plugins/stream/ &> /dev/null
	rm -rf $RutorrentDir/share/users/$seedUser &> /dev/null
done
rm -rf $MySB_InstallDir/temp/conf_users &> /dev/null
rsync -av $MySB_InstallDir/temp/share_users/ $RutorrentDir/share/users/ &> /dev/null && rm -rf $MySB_InstallDir/temp/share_users &> /dev/null
StatusSTD

#### 22 - OpenVPN
(( CurrentSTEP++ ))
if [ "$ToInstall_OpenVPN" == "YES" ]; then
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring OpenVPN$CEND..."
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'OpenVPN';"
	screen -dmS OpenVPN /bin/bash $MySB_InstallDir/install/OpenVPN 'UPGRADE';
	WaitingScreen OpenVPN
	StatusSTD
else
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for OpenVPN$CEND..."
	if [ "$IsInstalled_OpenVPN" == "YES" ]; then
		service openvpn stop &> /dev/null

		sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithGW.conf
		sed -i "s/DNS 8.8.4.4/DNS 10.0.0.1/g" /etc/openvpn/Server_TUN_WithGW.conf
		sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithoutGW.conf
		sed -i '/DNS 8.8.4.4/d' /etc/openvpn/Server_TUN_WithoutGW.conf

		#### Config file Server TAP - Without Redirect Gateway
		cp $MySB_InstallDir/templates/openvpn.server.conf.template /etc/openvpn/Server_TAP_WithoutGW.conf
		# adapt this file
		sed -i '/server 10.0.0.0 255.255.255.0/d' /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i '/redirect-gateway/d' /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/^;server-bridge/server-bridge/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/^user nobody/;user nobody/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/^group daemon/;group daemon/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/^;up/up/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/^;down/down/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<MySB_InstallDir>/$MySB_InstallDirEscaped/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<PORT>/$Port_OpenVPN_TAP_WithoutGW/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<PROTO>/$OpenVPN_Proto/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<TAKEY>/ta_$HostNameFQDN.key/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<CA>/ca_$HostNameFQDN.crt/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<CERT>/$HostNameFQDN.crt/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<KEY>/$HostNameFQDN.key/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/<DH>/dh1024_$HostNameFQDN.pem/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/dev tun/dev tap0/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i "s/10.0.0/10.0.2/g" /etc/openvpn/Server_TAP_WithoutGW.conf
		# and clean it (delete comments, delete unused option, delete blank line)
		sed -i '/#/d' /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i '/^;/d' /etc/openvpn/Server_TAP_WithoutGW.conf
		sed -i '/^$/d' /etc/openvpn/Server_TAP_WithoutGW.conf
		StatusSTD
	else
		echo -e "${CGREEN}Nothing to do !$CEND"
	fi
fi

#### 23 - Samba
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Samba$CEND..."
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Samba';"
	screen -dmS Samba /bin/bash $MySB_InstallDir/install/Samba 'UPGRADE';
	WaitingScreen Samba
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 24 - NFS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring NFS$CEND..."
if [ "$IsInstalled_OpenVPN" == "YES" ]; then	
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'NFS';"
	screen -dmS NFS /bin/bash $MySB_InstallDir/install/NFS 'UPGRADE';
	WaitingScreen NFS
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 25 - Fail2Ban
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Fail2Ban$CEND..."
if [ "$IsInstalled_Fail2Ban" == "YES" ] || [ "$ToInstall_Fail2Ban" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Fail2Ban';"
	screen -dmS Fail2Ban /bin/bash $MySB_InstallDir/install/Fail2Ban 'UPGRADE';
	WaitingScreen Fail2Ban
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 26 - RKHunter
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring RKHunter$CEND..."
screen -dmS RKHunter /bin/bash $MySB_InstallDir/install/RKHunter 'UPGRADE';
WaitingScreen RKHunter
StatusSTD

#### 27 - LogWatch
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Logwatch$CEND..."
if [ "$IsInstalled_LogWatch" == "YES" ] || [ "$ToInstall_LogWatch" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'LogWatch';"
	screen -dmS Logwatch /bin/bash $MySB_InstallDir/install/Logwatch 'UPGRADE';
	WaitingScreen Logwatch
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### 28 - rTorrent Blocklists
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Compiling the rTorrent blocklist$CEND..."
screen -dmS Blocklist /bin/bash $MySB_InstallDir/install/Blocklists 'UPGRADE';
WaitingScreen Blocklist
StatusSTD

#### 29 - Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Reading database informations$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
if [ -f $MySB_InstallDir/inc/funcs ]; then source $MySB_InstallDir/inc/funcs; fi
ListingUsers
StatusSTD

#### 30 - Crontab
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for Crontab$CEND..."
crontab -l > /tmp/crontab.tmp
for seedUser in $UsersList; do
	sed -i '/'$seedUser'/d' /tmp/crontab.tmp
	echo "*/5 * * * * if ! ( /bin/ps U $seedUser | grep rtorrent > /dev/null ); then /etc/init.d/rtorrent-$seedUser restart /dev/null 2>1; fi" >> /tmp/crontab.tmp
	echo "0 12 1 * * /bin/bash $MySB_InstallDir/scripts/PaymentReminder.bsh $seedUser CRON /dev/null 2>1" >> /tmp/crontab.tmp
done
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

#### 31 - rTorrent (.rtorrent.rc)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating new '.rtorrent.rc' file for all users$CEND..."
for seedUser in $UsersList; do
	service rtorrent-$seedUser stop &> /dev/null
	
	#### script init
	update-rc.d rtorrent-$seedUser remove -f &> /dev/null
	cp $MySB_InstallDir/templates/etc.init.rtorrent.template /etc/init.d/rtorrent-$seedUser
	RutorrentDirEscaped=`echo $RutorrentDir | sed s,/,\\\\\\\\\\/,g`
	perl -pi -e "s/<username>/$seedUser/g" /etc/init.d/rtorrent-$seedUser
	perl -pi -e "s/<rutorrent_dir>/$RutorrentDirEscaped/g" /etc/init.d/rtorrent-$seedUser
	chmod +x /etc/init.d/rtorrent-$seedUser

	HOMEDIR_ESCAPED=`echo /home/$seedUser | sed s,/,\\\\\\\\\\/,g`
	SCGIPORT="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT scgi_port FROM users WHERE users_ident = '$seedUser'\"`"
	NETWORKPORT="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT rtorrent_port FROM users WHERE users_ident = '$seedUser'\"`"

	cp /home/$seedUser/.rtorrent.rc /home/$seedUser/.rtorrent.rc.bckp_v1.1_to_$MySB_CurrentVersion
	cp $MySB_InstallDir/templates/rtorrent.rc.template /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<InstallDir>/$MySB_InstallDirEscaped/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<server_ip>/$SrvIpAddress/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<username>/$seedUser/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<homedir>/$HOMEDIR_ESCAPED/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<scgi_port>/$SCGIPORT/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<port_range>/$NETWORKPORT-$NETWORKPORT/g" /home/$seedUser/.rtorrent.rc

	if [ "$MySB_PeerBlock" == "rTorrent" ]; then
		perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}print/print/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}schedule=load_filter/schedule=load_filter/g" /home/$seedUser/.rtorrent.rc
	fi

	case "$FILESYSTEMTYPE" in
		"ext4"|"xfs"|"btrfs")
			perl -pi -e "s/system.file_allocate.set = no/system.file_allocate.set = yes/g" /home/$seedUser/.rtorrent.rc
		;;
		*)
			perl -pi -e "s/^system.file_allocate.set = yes/system.file_allocate.set = no/g" /home/$seedUser/.rtorrent.rc
		;;
	esac
done
StatusSTD

#### 32 - Cleaning
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Cleaning$CEND..."
rm -rf $MySB_InstallDir/temp/* &> /dev/null
if [ -f /usr/share/nginx/html/50x.html ]; then rm -f /usr/share/nginx/html/50x.html &> /dev/null; fi
if [ -d /usr/share/nginx/html/seedbox-manager ]; then rm -rf /usr/share/nginx/html/seedbox-manager &> /dev/null; fi
if [ -d /usr/share/nginx/html/Cakebox-light ]; then rm -rf /usr/share/nginx/html/Cakebox-light &> /dev/null; fi
StatusSTD

#### 33 - STOP & START services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Restarting all services$CEND..."
ManageServices stop "stunnel4 postfix" &> /dev/null
ManageServices start "cron nginx openvpn stunnel4 postfix" &> /dev/null
StatusSTD

#### 34 - Send mail for each user with new version
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Clearing the password for all users$CEND..."
MainUserId="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT id_users FROM users WHERE admin = '1'\"`"
for seedUser in $UsersList; do
	UserId=$(sqlite3 -cmd '.timeout 150000' $MySB_DB "SELECT id_users FROM users WHERE users_ident = '$seedUser'")
	UserPassword="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT users_passwd FROM users WHERE users_ident = '$seedUser'\"`"
	
	#### Erase all users passwords and addresses (except main user)
	if [ "$UserId" != "$MainUserId" ]; then
		sqlite3 -cmd '.timeout 150000' $MySB_DB "DELETE FROM users_addresses WHERE id_users = '$UserId' AND id_users != '$MainUserId'"
		if [ -z "$UserPassword" ]; then
			UserPassword="`GenPassword 8`"
		fi
		sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE users SET users_passwd = '$UserPassword' WHERE users_ident = '$seedUser';"
		
		ScriptInvoke "screen" "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$seedUser" "$UserPassword" "UPGRADE"
	else
		CurentUserIP="`echo $SSH_CLIENT | awk '{ print $1 }'`"
		if [ -z "$CurentUserIP" ]; then
			CurentUserIP="`who --ips | awk '{print $6}' | grep ^[0123456789]`"
			if [ -z "$CurentUserIP" ]; then
				CurentUserIP="`who --ips | awk '{print $5}' | grep ^[0123456789]`"
			fi
		fi
		
		MainUserIPs="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT ipv4 FROM users_addresses WHERE is_active = '1' AND id_users = '$MainUserId'\" | sed -e 's/^ //g;' | sed 's/\s+$//' | sed -e 's/\/32//g;'`"
		if [ -z "`echo $MainUserIPs | grep $CurentUserIP`" ]; then
			HostName="$(nslookup $CurentUserIP | grep 'name =' | awk '{ print $4 }' | sed 's/.\{1\}$//g')"
			sqlite3 -cmd '.timeout 150000' $MySB_DB "INSERT into users_addresses (id_users,ipv4,hostname,check_by,is_active) VALUES (\"$UserId\",\"$CurentUserIP\",\"$HostName\",\"ipv4\",\"1\");"
		fi
		SendMail "MySB - Upgraded to $MySB_CurrentVersion" "$seedUser" "upgrade"
	fi
done
StatusSTD

#### 35 - Create missing directories and change rights
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Force owners and rights for some directories$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### 36 - Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating basic security rules$CEND..."
ScriptInvoke 'screen' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create' 'UPGRADE'
StatusSTD

clear
echo -e "${CGREEN}Upgrade finished succesfully !$CEND"
echo
QuestionGetString NO  "Do you want to reboot your seedbox now (recommended) ?" REBOOT YES

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################